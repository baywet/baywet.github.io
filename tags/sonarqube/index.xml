<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sonarqube on Baywet's blog</title><link>https://baywet.github.io/tags/sonarqube/</link><description>Recent content in sonarqube on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Fri, 06 Oct 2017 08:00:00 +0000</lastBuildDate><atom:link href="https://baywet.github.io/tags/sonarqube/index.xml" rel="self" type="application/rss+xml"/><item><title>Determine your technical debt using SonarQube - Conclusion</title><link>https://baywet.github.io/determine-your-technical-debt-2017-10-06-08-00-00/</link><pubDate>Fri, 06 Oct 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-10-06-08-00-00/</guid><description>Installing and setting up SonarQube may seem quite complex and tedious.
I hope that this series has helped you to go faster implementing it.
Now, you can clearly identify your technical debt and take actions to improve the quality of your developments.
It is obvious that when a thousand problems appear in the code at once, it can be discouraging, just keep this in mind:
There are false positives, make a first pass to ignore/exclude those</description></item><item><title>Determine your technical debt using SonarQube - Bonus SonarLint extension configuration</title><link>https://baywet.github.io/determine-your-technical-debt-2017-10-04-08-00-00/</link><pubDate>Wed, 04 Oct 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-10-04-08-00-00/</guid><description>TL; DR You can display SonarQube static analysis results live in Visual Studio error and information console using the same rules set as the SonarQube project.
Installing the extension
Just go to https://www.sonarlint.org/VisualStudio/index.html and proceed with the installation.
Binding the Visual Studio solution to the SonarQube analysis From the Team Explorer click SonarQube
Click on connect.
(if you obtain a certificate error, you must install the self-signed certificate of the SonarQube server on your machine)</description></item><item><title>Determine your technical debt using SonarQube - Monitoring the results</title><link>https://baywet.github.io/determine-your-technical-debt-2017-10-02-08-00-00/</link><pubDate>Mon, 02 Oct 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-10-02-08-00-00/</guid><description>TL; DR Static analysis errors will appear as of the warnings in the compilation section. A static analysis badge will also appear on the build report and you&amp;rsquo;ll be able to have detailed and comprehensive information from SonarQube.
Information incorporated with the build When displaying the details of a build, you&amp;rsquo;ll now find a new section dedicated to SonarQube. Within that section, besides the quality badge, you&amp;rsquo;ll also find a link to the static analysis results details.</description></item><item><title>Determine your technical debt using SonarQube - Creating the SonarQube project</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00qwqw/</link><pubDate>Fri, 29 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00qwqw/</guid><description>TL; DR SonarQube allows you to create projects. These projects will hold your code analysis results. You can configure a SQ project for each code repository or even for each branch to have different deltas. (ex my master builds every month, I want to see changes to the monthly and my dev builds daily so I want to see evolution on a day by day basis).
Creating the project Go to &amp;ldquo;configuration&amp;rdquo;-&amp;gt; &amp;ldquo;Projects&amp;rdquo;-&amp;gt; &amp;ldquo;Management&amp;rdquo; then &amp;ldquo;create project&amp;rdquo;.</description></item><item><title>Determine your technical debt using SonarQube - Updating your build definitions</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00labd/</link><pubDate>Fri, 29 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00labd/</guid><description>TL; DR Static analysis will be executed when building your source base using the central build machine. You have two options to set this up with VSTS:
Your project is &amp;ldquo;Visual Studio&amp;quot; related and leverages sln and cs/vb proj files: in that case you can leverage integrated pre and post build tasks provided by the SonarQube VSTS extension. Your project is not build using msbuild: in that case you must leverage the SonarQube CLI task.</description></item><item><title>Determine your technical debt using SonarQube - Creating and configuring a service account for VSTS in SonarQube</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-27-08-00-00/</link><pubDate>Wed, 27 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-27-08-00-00/</guid><description>TL; DR To prevent anyone from sending analysis results to our SonarQube installation, we need to secure the access to its services. To do so, we&amp;rsquo;ll configure a service account.
Creating the service account From SonarQube, go to administration, security, users, and add an account.
Next click on the &amp;ldquo;tokens&amp;quot; cell for the account we just created an generate a new personal access token.
You can also refer to that documentation if you&amp;rsquo;re not sure how to generate a PAT https://docs.</description></item><item><title>Determine your technical debt using SonarQube - Setting up Azure Active directory for authentication</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-25-08-00-00/</link><pubDate>Mon, 25 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-25-08-00-00/</guid><description>TL; DR We will install and configure an add-on to delegate authentication to Azure Active Directory. This will allow our developers to use the same account between Visual Studio Team Services and SonarQube.
Configuration of the authentication module
Since version 5.4 SonarQube provides an additional plugin relying on the OAuth protocol to communicate with AAD. This will allow the users to leverage their corporate account to access SonarQube, providing SSO and simplifying the administrators job by having a central identity repository.</description></item><item><title>Determine your technical debt using SonarQube - Adding modules</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-22-08-00-00/</link><pubDate>Fri, 22 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-22-08-00-00/</guid><description>TL; DR Static analysis works by leveraging rules. These rules are grouped by language or language categories in modules that you can install. In addition to providing support for the subsequent languages, these modules can extend the native capabilities of SonarQube.
Most of them are free, some are subject to commercial licenses.
Installing Add-ons Open SonarQube and go to configuration, system, search for and install the modules that you&amp;rsquo;re interested in.</description></item><item><title>Determine your technical debt using SonarQube - Opening SonarQube’s ports</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</link><pubDate>Wed, 20 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</guid><description>TL; DR Open ports 22, 9000, 80 and 443 inbound on the VM.
Details of the opening of ports Rather than repeating what is already documented, I will provide you with the link
https://Github.com/baywet/azure-docker-SonarQube#step-2-opening-firewall-ports
It is necessary to open the ports 22, 80, 443 and 9000 allowing respectively to access the machine remote shell, load http and https content, and access the management console.</description></item><item><title>Determine your technical debt using SonarQube - Installing the machine</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-18-08-00-00/</link><pubDate>Mon, 18 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-18-08-00-00/</guid><description>TL; DR We will update the machine, install docker, and provision the containers we need.
Installation of docker and updating the machine Connect to the machine using SSH (Putty is a very good client for windows) and run the following commands:
https://Github.com/baywet/azure-docker-SonarQube#step-4-Setup-docker
Setting up containers, creating the certificates The containers are the components of our system managing the web traffic and providing the SonarQube service.
To secure connections, we will also generate self-signed SSL certificates which is not the easiest thing to do when someone is not used to working with linux environments.</description></item><item><title>Determine your technical debt using SonarQube - Creating the database</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</link><pubDate>Fri, 15 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</guid><description>TL; DR Create a db sql azure with collation set to SQL_Latin1_General_CP1_CS_AS.
Details of the database creation The SQL Azure database creation steps are already well described, crucial detail: use the following collation: SQL_Latin1_General_CP1_CS_AS. (and use a blank template)
https://Github.com/baywet/azure-docker-SonarQube#step-3-create-the-azure-SQL-database
Keep the database access settings (FQDN of the server, username, password, the database name) somewhere, we will need those later.
Don&amp;rsquo;t forget to open the firewall of the SQL Server for connections from Azure.</description></item><item><title>Determine your technical debt using SonarQube - Provisioning the SonarQube VM</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-13-08-00-00/</link><pubDate>Wed, 13 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-13-08-00-00/</guid><description>TL; DR We&amp;rsquo;ll provision a ubuntu server in Azure, and install Putty and WinSCP on your local machine
Details of provisioning Here is a link to a documentation explaining how to do it
https://Github.com/baywet/azure-docker-SonarQube#step-1-create-the-virtual-machine-in-Azure
This is! the machine is being provisioned!
Meanwhile take the opportunity to download a SSH terminal if you don&amp;rsquo;t have one, I recommend https://www.PuTTY.org/ (you can also install WinSCP that will also provide a GUI to transfer files)</description></item><item><title>Determine your technical debt using SonarQube - What parts to use?</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</link><pubDate>Mon, 11 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</guid><description>TL; DR Planning, Sources, Build, deployment, testing: VSTS. Analysis: Azure VM (SonarQube), Azure SQL.
Parts of our software factory Because we use a maximum of services cloud at 2toLead I realized the following installation:
Source control: VSTS (git or tfsvc, doesn&amp;rsquo;t matter) Build system: build 2015 VSTS Build machine: provided by VSTS as a service SonarQube machine: Ubuntu Server hosted in Azure Data SonarQube: Azure SQL Database, 10 DTU Note that to facilitate the management of the SonarQube &amp;ldquo;box&amp;quot; we are going to install Docker on the ubuntu machine.</description></item><item><title>Determine your technical debt using SonarQube - Static analysis</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</link><pubDate>Fri, 08 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</guid><description>TL; DR Static analysis allows you to understand weaknesses of your code based on a set of rules. You can have it run automatically on a server or from the IDE.
Introduction to static analysis The principle of static analysis is to take advantage of rules set more or less complex, those will detect patterns in the code that are problematic, categorize their importance and suggest a resolution.
A few examples:</description></item><item><title>Determine your technical debt using SonarQube - Introduction</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</link><pubDate>Wed, 06 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</guid><description>TL; DR This series will explain *how to set up an automated code quality analysis* which is almost free of charge with Visual Studio Team Services, Docker, Azure, and SonarQube.
Preamble There is bad quality code in every development project. This goes from the quick and dirty hack we are not proud of, to the long-forgotten code written by a developer who quit the company.
The problem with this code is that it will eventually accumulate and slow down the pace of new features delivery.</description></item></channel></rss>