<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vsts on Baywet's blog</title><link>https://baywet.github.io/tags/vsts/</link><description>Recent content in Vsts on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Mon, 15 Apr 2024 10:13:42 -0400</lastBuildDate><atom:link href="https://baywet.github.io/tags/vsts/index.xml" rel="self" type="application/rss+xml"/><item><title>Speaking at SharePoint Saturday New England 2018</title><link>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-27-05-00-00/</link><pubDate>Mon, 27 Aug 2018 05:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-27-05-00-00/</guid><description>This year again I have the opportunity to speak at the SPS New England.
I’ll give a speech about “Improving DevOps using Microsoft&amp;rsquo;s Business Productivity Tools and more” and I&amp;rsquo;ll be co-presenting the session with my friend Haniel Croitoru.
We&amp;rsquo;ll explore together how DevOps practices impact and improve solutions delivery for your customers and for the best. With real life scenarios and experience for the field we&amp;rsquo;ll show you how you can get started and what to expect out of it.</description></item><item><title>Speaking at SharePoint Saturday Pittsburgh 2018</title><link>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-23-05-00-00/</link><pubDate>Thu, 23 Aug 2018 05:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-23-05-00-00/</guid><description>I Have the pleasure to announce I have been selected to speak at SPS Pittsburgh 2018.
I’ll give a speech about the graph “How to do Dev-Ops with the SharePoint Framework and why it matters”.
Together we’ll see why it’s important to follow the DevOps processes, methodologies, and philosophy and how to implement it for the SharePoint Framework with Visual Studio Team Services (or TFS). Go from the original idea to production automating as much as possible!</description></item><item><title>Speaking at SharePoint Saturday Charlotte 2018</title><link>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-06-08-00-00/</link><pubDate>Mon, 06 Aug 2018 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/speaking-at-sharepoint-saturda-2018-08-06-08-00-00/</guid><description>I Have the pleasure to announce I have been selected to speak at SPS Charlotte 2018.
I’ll give a speech about the graph “How to do Dev-Ops with the SharePoint Framework and why it matters”.
Together we’ll see why it’s important to follow the DevOps processes, methodologies, and philosophy and how to implement it for the SharePoint Framework with Visual Studio Team Services (or TFS). Go from the original idea to production automating as much as possible!</description></item><item><title>Git: fork/import/manual copy, keep it clean</title><link>https://baywet.github.io/git-forkimportmanual-copy-keep/</link><pubDate>Wed, 21 Mar 2018 04:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/git-forkimportmanual-copy-keep/</guid><description>Part of my role at 2toLead is to help set guidance around best source management practices either internally or for our customers. One of the questions I get often is: Should I fork this repository or do something else with it?
It’s hard to get clear and simple guidance on the web so I thought I’d take a stab at it.
As we’re using Visual Studio Team Services, my examples and screenshots will be based on it, but it really applies to any git service like Github or internal git servers.</description></item><item><title>Speaking at SharePoint Saturday Detroit 2017</title><link>https://baywet.github.io/speaking-at-sharepoint-saturda-2017-11-16-17-26-00/</link><pubDate>Thu, 16 Nov 2017 17:26:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/speaking-at-sharepoint-saturda-2017-11-16-17-26-00/</guid><description>This year again I have the opportunity to speak at the SPS Detroit.
I’ll give a speech about “Improving DevOps using Microsoft&amp;rsquo;s Business Productivity Tools and more” and I&amp;rsquo;ll be co-presenting the session with my friend Haniel Croitoru.
We&amp;rsquo;ll explore together how DevOps practices impact and improve solutions delivery for your customers and for the best. With real life scenarios and experience for the field we&amp;rsquo;ll show you how you can get started and what to expect out of it.</description></item><item><title>Using PnP PowerShell on Visual Studio Team Services (VSTS) Hosted Agent</title><link>https://baywet.github.io/using-pnp-powershell-on-visual/</link><pubDate>Mon, 09 Oct 2017 06:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/using-pnp-powershell-on-visual/</guid><description>Visual Studio Team Services (VSTS) provides great Continuous Integration (CI) and Continuous Deployment (CD) functionalities you can leverage to implement DevOps pipelines and automation with your custom developments.
If your custom solutions rely on PnP PowerShell during their build and/or deployment processes, you will need PnP PowerShell to be installed on the agent. Unfortunately the Hosted Agents do not have PnP PowerShell installed by default. Note: that documentation only applies to the Hosted and Hosted 2017 agents, the Linux Hosted Agent is not supported at the moment</description></item><item><title>Determine your technical debt using SonarQube - Conclusion</title><link>https://baywet.github.io/determine-your-technical-debt-2017-10-06-08-00-00/</link><pubDate>Fri, 06 Oct 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-10-06-08-00-00/</guid><description>Installing and setting up SonarQube may seem quite complex and tedious.
I hope that this series has helped you to go faster implementing it.
Now, you can clearly identify your technical debt and take actions to improve the quality of your developments.
It is obvious that when a thousand problems appear in the code at once, it can be discouraging, just keep this in mind:
There are false positives, make a first pass to ignore/exclude those</description></item><item><title>Determine your technical debt using SonarQube - Bonus SonarLint extension configuration</title><link>https://baywet.github.io/determine-your-technical-debt-2017-10-04-08-00-00/</link><pubDate>Wed, 04 Oct 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-10-04-08-00-00/</guid><description>TL; DR You can display SonarQube static analysis results live in Visual Studio error and information console using the same rules set as the SonarQube project.
Installing the extension
Just go to https://www.sonarlint.org/VisualStudio/index.html and proceed with the installation.
Binding the Visual Studio solution to the SonarQube analysis From the Team Explorer click SonarQube
Click on connect.
(if you obtain a certificate error, you must install the self-signed certificate of the SonarQube server on your machine)</description></item><item><title>Determine your technical debt using SonarQube - Creating the SonarQube project</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00qwqw/</link><pubDate>Fri, 29 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00qwqw/</guid><description>TL; DR SonarQube allows you to create projects. These projects will hold your code analysis results. You can configure a SQ project for each code repository or even for each branch to have different deltas. (ex my master builds every month, I want to see changes to the monthly and my dev builds daily so I want to see evolution on a day by day basis).
Creating the project Go to &amp;ldquo;configuration&amp;rdquo;-&amp;gt; &amp;ldquo;Projects&amp;rdquo;-&amp;gt; &amp;ldquo;Management&amp;rdquo; then &amp;ldquo;create project&amp;rdquo;.</description></item><item><title>Determine your technical debt using SonarQube - Updating your build definitions</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00labd/</link><pubDate>Fri, 29 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-29-08-00-00labd/</guid><description>TL; DR Static analysis will be executed when building your source base using the central build machine. You have two options to set this up with VSTS:
Your project is &amp;ldquo;Visual Studio&amp;quot; related and leverages sln and cs/vb proj files: in that case you can leverage integrated pre and post build tasks provided by the SonarQube VSTS extension. Your project is not build using msbuild: in that case you must leverage the SonarQube CLI task.</description></item><item><title>Determine your technical debt using SonarQube - Creating and configuring a service account for VSTS in SonarQube</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-27-08-00-00/</link><pubDate>Wed, 27 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-27-08-00-00/</guid><description>TL; DR To prevent anyone from sending analysis results to our SonarQube installation, we need to secure the access to its services. To do so, we&amp;rsquo;ll configure a service account.
Creating the service account From SonarQube, go to administration, security, users, and add an account.
Next click on the &amp;ldquo;tokens&amp;quot; cell for the account we just created an generate a new personal access token.
You can also refer to that documentation if you&amp;rsquo;re not sure how to generate a PAT https://docs.</description></item><item><title>Determine your technical debt using SonarQube - Setting up Azure Active directory for authentication</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-25-08-00-00/</link><pubDate>Mon, 25 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-25-08-00-00/</guid><description>TL; DR We will install and configure an add-on to delegate authentication to Azure Active Directory. This will allow our developers to use the same account between Visual Studio Team Services and SonarQube.
Configuration of the authentication module
Since version 5.4 SonarQube provides an additional plugin relying on the OAuth protocol to communicate with AAD. This will allow the users to leverage their corporate account to access SonarQube, providing SSO and simplifying the administrators job by having a central identity repository.</description></item><item><title>Determine your technical debt using SonarQube - Opening SonarQube’s ports</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</link><pubDate>Wed, 20 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</guid><description>TL; DR Open ports 22, 9000, 80 and 443 inbound on the VM.
Details of the opening of ports Rather than repeating what is already documented, I will provide you with the link
https://Github.com/baywet/azure-docker-SonarQube#step-2-opening-firewall-ports
It is necessary to open the ports 22, 80, 443 and 9000 allowing respectively to access the machine remote shell, load http and https content, and access the management console.</description></item><item><title>Determine your technical debt using SonarQube - Creating the database</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</link><pubDate>Fri, 15 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</guid><description>TL; DR Create a db sql azure with collation set to SQL_Latin1_General_CP1_CS_AS.
Details of the database creation The SQL Azure database creation steps are already well described, crucial detail: use the following collation: SQL_Latin1_General_CP1_CS_AS. (and use a blank template)
https://Github.com/baywet/azure-docker-SonarQube#step-3-create-the-azure-SQL-database
Keep the database access settings (FQDN of the server, username, password, the database name) somewhere, we will need those later.
Don&amp;rsquo;t forget to open the firewall of the SQL Server for connections from Azure.</description></item><item><title>Determine your technical debt using SonarQube - Provisioning the SonarQube VM</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-13-08-00-00/</link><pubDate>Wed, 13 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-13-08-00-00/</guid><description>TL; DR We&amp;rsquo;ll provision a ubuntu server in Azure, and install Putty and WinSCP on your local machine
Details of provisioning Here is a link to a documentation explaining how to do it
https://Github.com/baywet/azure-docker-SonarQube#step-1-create-the-virtual-machine-in-Azure
This is! the machine is being provisioned!
Meanwhile take the opportunity to download a SSH terminal if you don&amp;rsquo;t have one, I recommend https://www.PuTTY.org/ (you can also install WinSCP that will also provide a GUI to transfer files)</description></item><item><title>Determine your technical debt using SonarQube - What parts to use?</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</link><pubDate>Mon, 11 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</guid><description>TL; DR Planning, Sources, Build, deployment, testing: VSTS. Analysis: Azure VM (SonarQube), Azure SQL.
Parts of our software factory Because we use a maximum of services cloud at 2toLead I realized the following installation:
Source control: VSTS (git or tfsvc, doesn&amp;rsquo;t matter) Build system: build 2015 VSTS Build machine: provided by VSTS as a service SonarQube machine: Ubuntu Server hosted in Azure Data SonarQube: Azure SQL Database, 10 DTU Note that to facilitate the management of the SonarQube &amp;ldquo;box&amp;quot; we are going to install Docker on the ubuntu machine.</description></item><item><title>Determine your technical debt using SonarQube - Static analysis</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</link><pubDate>Fri, 08 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</guid><description>TL; DR Static analysis allows you to understand weaknesses of your code based on a set of rules. You can have it run automatically on a server or from the IDE.
Introduction to static analysis The principle of static analysis is to take advantage of rules set more or less complex, those will detect patterns in the code that are problematic, categorize their importance and suggest a resolution.
A few examples:</description></item><item><title>Determine your technical debt using SonarQube - Introduction</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</link><pubDate>Wed, 06 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</guid><description>TL; DR This series will explain *how to set up an automated code quality analysis* which is almost free of charge with Visual Studio Team Services, Docker, Azure, and SonarQube.
Preamble There is bad quality code in every development project. This goes from the quick and dirty hack we are not proud of, to the long-forgotten code written by a developer who quit the company.
The problem with this code is that it will eventually accumulate and slow down the pace of new features delivery.</description></item><item><title>Speaking at SharePoint Saturday Vancouver 2017</title><link>https://baywet.github.io/speaking-at-sharepoint-saturda-2017-03-09-14-00-00/</link><pubDate>Thu, 09 Mar 2017 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/speaking-at-sharepoint-saturda-2017-03-09-14-00-00/</guid><description>This year again I have the opportunity to speak at the SPS Vancouver.
I’ll give a speech about the SharePoint Framework and devops methodologies “Is it possible to do devops with the SharePoint framework?”.
You had it all right with solutions and add-ins. Your release pipeline was set up. Do new technologies and methodologies mean starting over?
Don’t panic I’m here to help! Together we’ll see how to set up a devops pipeline for SPFX developments with:</description></item><item><title>Update: continuous integration for dot net core</title><link>https://baywet.github.io/update-continuous-integration/</link><pubDate>Thu, 27 Oct 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/update-continuous-integration/</guid><description>A few months ago I published articles about continuous integration for dot net core projects.
Obviously it was really early in this “new framework” lifecycle (we were still on a beta version back then) and the tooling plus processes evolved a lot since.
Good news is you don’t need anymore a complex and often crashing powershell script. You don’t need anymore special tasks either other than standard command line and azure publishing tasks.</description></item><item><title>New tasks to build/release dotnetcore project with vsts</title><link>https://baywet.github.io/new-tasks-to-buildrelease-dotn/</link><pubDate>Wed, 10 Aug 2016 14:02:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/new-tasks-to-buildrelease-dotn/</guid><description>A few months ago I wrote a series of articles on how to set up a release pipeline for dnx/dotnetcore projects with vsts targeting azure web apps.
This series would require you to use a few scripts to build and publish the website executing them using powershell tasks in the build definition.
You don’t need to do that anymore because two new extensions are available on the marketplace:
I’ve been able to replace most of my scripts using VSTS DNX Tasks</description></item><item><title>Controlled update of SQL databases Schema with Entity Framework Code First in a continous delivery process</title><link>https://baywet.github.io/controlled-update-of-sql-datab/</link><pubDate>Thu, 03 Mar 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/controlled-update-of-sql-datab/</guid><description>Introduction Entity Framework is a well-known technology in the ORM domain for the .NET world.
Note: Object Relational Mapping, this is the part between data persistence unit and some more “high level” code.
When you start a new entity framework project you have a few different ways to do it, one of which being “code first”. It means our code will drive the SQL Schema evolution (which simplifies a lot of things and allows you to focus on business and not technical implementation).</description></item><item><title>Units tests using xUnit and Visual Studio Team Services for DNX projects</title><link>https://baywet.github.io/units-tests-using-xunit-and-vi/</link><pubDate>Tue, 01 Mar 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/units-tests-using-xunit-and-vi/</guid><description>Introduction DNX will soon be released and there’ll be a growing number of developers wanting to write unit tests to improve the quality of developments.
Ideally you’d like to run these unit tests in a continuous integration process in order to make sure you didn’t introduce any regression/bug or degraded performances.
In .NET world you have many tools to write unit tests:
MSTest/VSTest
NUnit
xUnit
…
(a non-exhaustive list https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.23 )</description></item><item><title>Building DNX projects using home installed build agent (TFS, VSTS)</title><link>https://baywet.github.io/building-dnx-projects-using-ho/</link><pubDate>Fri, 19 Feb 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/building-dnx-projects-using-ho/</guid><description>With DNX/DNU soon to be RTM there’ll be more and more developers eagers to build and deploy ASP.NET core 1 (formerly ASP.NET MVC 5) projects.
If the procedure is well described when you are using hosted agents (the ones microsoft runs for you on Azure), it’s a little more complex when you want to do it on a local agent.
https://msdn.microsoft.com/en-us/Library/vs/alm/Build/azure/deploy-aspnet5?f=255&amp;amp;MSPPError=-2147217396
On your agent’s machine you installed and updated visual studio and all the tools right?</description></item></channel></rss>