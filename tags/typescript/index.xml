<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on Baywet's blog</title><link>https://baywet.github.io/tags/typescript/</link><description>Recent content in Typescript on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Mon, 15 Apr 2024 10:13:42 -0400</lastBuildDate><atom:link href="https://baywet.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Full version of lodash now available in the SharePoint Framework</title><link>https://baywet.github.io/full-version-of-lodash-now-ava/</link><pubDate>Wed, 03 Jan 2018 03:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/full-version-of-lodash-now-ava/</guid><description>TL; DR; Microsoft replaced @types/es6-collections by the es2015.collection library in version 1.4.0 of the packages. Those had a conflicting definition of weakmap which caused issues with packages like lodash.
Long version Microsoft recently release v1.4.0 of the SharePoint Framwork and it’s packages. It contains a lot of improvements and one of those probably went unnoticed by many of us.
@types/es6-collections has been replaced by es2015.collection library (native, comes with the compiler/JS Engines).</description></item><item><title>Determine your technical debt using SonarQube - Adding modules</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-22-08-00-00/</link><pubDate>Fri, 22 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-22-08-00-00/</guid><description>TL; DR Static analysis works by leveraging rules. These rules are grouped by language or language categories in modules that you can install. In addition to providing support for the subsequent languages, these modules can extend the native capabilities of SonarQube.
Most of them are free, some are subject to commercial licenses.
Installing Add-ons Open SonarQube and go to configuration, system, search for and install the modules that you&amp;rsquo;re interested in.</description></item><item><title>Determine your technical debt using SonarQube - What parts to use?</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</link><pubDate>Mon, 11 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-11-08-00-00/</guid><description>TL; DR Planning, Sources, Build, deployment, testing: VSTS. Analysis: Azure VM (SonarQube), Azure SQL.
Parts of our software factory Because we use a maximum of services cloud at 2toLead I realized the following installation:
Source control: VSTS (git or tfsvc, doesn&amp;rsquo;t matter) Build system: build 2015 VSTS Build machine: provided by VSTS as a service SonarQube machine: Ubuntu Server hosted in Azure Data SonarQube: Azure SQL Database, 10 DTU Note that to facilitate the management of the SonarQube &amp;ldquo;box&amp;quot; we are going to install Docker on the ubuntu machine.</description></item><item><title>Determine your technical debt using SonarQube - Static analysis</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</link><pubDate>Fri, 08 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</guid><description>TL; DR Static analysis allows you to understand weaknesses of your code based on a set of rules. You can have it run automatically on a server or from the IDE.
Introduction to static analysis The principle of static analysis is to take advantage of rules set more or less complex, those will detect patterns in the code that are problematic, categorize their importance and suggest a resolution.
A few examples:</description></item><item><title>Determine your technical debt using SonarQube - Introduction</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</link><pubDate>Wed, 06 Sep 2017 08:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</guid><description>TL; DR This series will explain *how to set up an automated code quality analysis* which is almost free of charge with Visual Studio Team Services, Docker, Azure, and SonarQube.
Preamble There is bad quality code in every development project. This goes from the quick and dirty hack we are not proud of, to the long-forgotten code written by a developer who quit the company.
The problem with this code is that it will eventually accumulate and slow down the pace of new features delivery.</description></item><item><title>Update to _spPageContextInfo type definitions - new properties available</title><link>https://baywet.github.io/update-to-sppagecontextinfo-ty/</link><pubDate>Fri, 16 Jun 2017 07:07:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/update-to-sppagecontextinfo-ty/</guid><description>If you&amp;rsquo;re building modern SharePoint components (Framework or not), there&amp;rsquo;s a high chance you&amp;rsquo;re using TypeScript.
In that case you&amp;rsquo;re probably using @types/SharePoint to provide auto-completion as well as some level of understanding for the compiler of what&amp;rsquo;s going on.
There&amp;rsquo;s one object in particular that SharePoint hydrates for us to give some understanding of where the user is and what he/she is doing: _spPageContextInfo.
A lot of properties were missing in those type definitions, old stuff like the web Id but also new things coming from SharePoint Online like canUserCreateMicrosoftForm.</description></item></channel></rss>