<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on Baywet's blog</title><link>https://baywet.github.io/tags/code/</link><description>Recent content in code on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Sep 2017 08:00:00 +0000</lastBuildDate><atom:link href="https://baywet.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Determine your technical debt using SonarQube - Opening SonarQubeâ€™s ports</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</link><pubDate>Wed, 20 Sep 2017 08:00:00 +0000</pubDate><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-20-08-00-00/</guid><description>TL; DR Open ports 22, 9000, 80 and 443 inbound on the VM.
Details of the opening of ports Rather than repeating what is already documented, I will provide you with the link
https://Github.com/baywet/azure-docker-SonarQube#step-2-opening-firewall-ports
It is necessary to open the ports 22, 80, 443 and 9000 allowing respectively to access the machine remote shell, load http and https content, and access the management console.</description></item><item><title>Determine your technical debt using SonarQube - Creating the database</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</link><pubDate>Fri, 15 Sep 2017 08:00:00 +0000</pubDate><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-15-08-00-00/</guid><description>TL; DR Create a db sql azure with collation set to SQL_Latin1_General_CP1_CS_AS.
Details of the database creation The SQL Azure database creation steps are already well described, crucial detail: use the following collation: SQL_Latin1_General_CP1_CS_AS. (and use a blank template)
https://Github.com/baywet/azure-docker-SonarQube#step-3-create-the-azure-SQL-database
Keep the database access settings (FQDN of the server, username, password, the database name) somewhere, we will need those later.
Don&amp;rsquo;t forget to open the firewall of the SQL Server for connections from Azure.</description></item><item><title>Determine your technical debt using SonarQube - Static analysis</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</link><pubDate>Fri, 08 Sep 2017 08:00:00 +0000</pubDate><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-08-08-00-00/</guid><description>TL; DR Static analysis allows you to understand weaknesses of your code based on a set of rules. You can have it run automatically on a server or from the IDE.
Introduction to static analysis The principle of static analysis is to take advantage of rules set more or less complex, those will detect patterns in the code that are problematic, categorize their importance and suggest a resolution.
A few examples:</description></item><item><title>Determine your technical debt using SonarQube - Introduction</title><link>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</link><pubDate>Wed, 06 Sep 2017 08:00:00 +0000</pubDate><guid>https://baywet.github.io/determine-your-technical-debt-2017-09-06-08-00-00/</guid><description>TL; DR This series will explain *how to set up an automated code quality analysis* which is almost free of charge with Visual Studio Team Services, Docker, Azure, and SonarQube.
Preamble There is bad quality code in every development project. This goes from the quick and dirty hack we are not proud of, to the long-forgotten code written by a developer who quit the company.
The problem with this code is that it will eventually accumulate and slow down the pace of new features delivery.</description></item><item><title>Localizing JavaScript of a Full Trust solution</title><link>https://baywet.github.io/localizing-javascript-of-a-ful/</link><pubDate>Wed, 13 Aug 2014 03:58:16 +0000</pubDate><guid>https://baywet.github.io/localizing-javascript-of-a-ful/</guid><description>Introduction We, SharePoint developers of ancient times when &amp;ldquo;full trust&amp;rdquo; solutions ruled, have understood one thing: using JavaScript improves by far our solutions.
Indeed this allows to reduce the load of the servers and makes the user experience more &amp;ldquo;responsive&amp;rdquo;.
But what if you want to display messages in different languages depending on the user? In .NET (understand server-side) it is quite simple, just use of resources. (see one of my posts on the subject)</description></item></channel></rss>