<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Baywet's blog</title><link>https://baywet.github.io/tags/javascript/</link><description>Recent content in javascript on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 16 Apr 2018 08:00:00 +0000</lastBuildDate><atom:link href="https://baywet.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Internet Explorer compatibility mode is changing on SharePoint Online</title><link>https://baywet.github.io/internet-explorer-compatibilit/</link><pubDate>Mon, 16 Apr 2018 08:00:00 +0000</pubDate><guid>https://baywet.github.io/internet-explorer-compatibilit/</guid><description>The history being this situation…. Internet Explorer has been a corporate browser for two decades now. And many of us remember the dark ages of web development when we needed to have “IE compatible code” and “web compatible code”.
As many companies invested deeply in the browser building portals that worked with specific versions, Microsoft provided a decade ago a compatibility mode, allowing the browser to “behave” like a former version of itself and stay compatible with websites that had not been updated.</description></item><item><title>Determine whether or not a SharePoint library is running with the new experience</title><link>https://baywet.github.io/determine-whether-or-not-a-sha/</link><pubDate>Tue, 14 Jun 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/determine-whether-or-not-a-sha/</guid><description>Microsoft just released the new experience for SharePoint libraries and I know a lot of you built custom look and feel and/or components on top of the library ui. (I’m thinking in particular about ScriptLink actions)
You might be in a situation where the code you need to run will be different depending on the experience being used.
After a little bit of research, here is an example of solution.</description></item><item><title>SharePoint apps (add-ins) JavaScript disappeared</title><link>https://baywet.github.io/sharepoint-apps-add-ins-javasc/</link><pubDate>Tue, 09 Jun 2015 04:09:37 +0000</pubDate><guid>https://baywet.github.io/sharepoint-apps-add-ins-javasc/</guid><description>At Negotium we recently came across a weird problem.
Let’s assume you previously built a Provider hosted app for SharePoint.
Now let’s assume you updated to the latest version of the SDK (April/May update)
Finally let’s assume your tenant has been updated recently (v16.0.4121.1212 or above)
It’s likely that you are loading SP.*.js files and MicrosoftAjax.js the way it used to be recommended by Microsoft per say: &amp;lt;HostWebUrl&amp;gt;/_layouts/15/jsfile.js or &amp;lt;AppWebUrl&amp;gt;/_layouts/15/jsfile.js.</description></item><item><title>Maximum provided results to generate refiners</title><link>https://baywet.github.io/maximum-provided-results-to-ge/</link><pubDate>Sun, 08 Mar 2015 15:41:45 +0000</pubDate><guid>https://baywet.github.io/maximum-provided-results-to-ge/</guid><description>Since SharePoint 2010 you have the ability to improve the search experience in adding custom search refiners. Even better you can develop new ones if you want. As a reminder search refiners (or facets) are located on the left of the search result page and allow you to filter search results to have a faster access to relevant items. (file type, author, modification date…)
Here is some documentation if you’d like to know more about it.</description></item><item><title>Localizing JavaScript of a Full Trust solution</title><link>https://baywet.github.io/localizing-javascript-of-a-ful/</link><pubDate>Wed, 13 Aug 2014 03:58:16 +0000</pubDate><guid>https://baywet.github.io/localizing-javascript-of-a-ful/</guid><description>Introduction We, SharePoint developers of ancient times when &amp;ldquo;full trust&amp;rdquo; solutions ruled, have understood one thing: using JavaScript improves by far our solutions.
Indeed this allows to reduce the load of the servers and makes the user experience more &amp;ldquo;responsive&amp;rdquo;.
But what if you want to display messages in different languages depending on the user? In .NET (understand server-side) it is quite simple, just use of resources. (see one of my posts on the subject)</description></item></channel></rss>