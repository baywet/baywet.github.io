<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on Baywet's blog</title><link>https://baywet.github.io/tags/developer/</link><description>Recent content in Developer on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Mon, 15 Apr 2024 10:13:42 -0400</lastBuildDate><atom:link href="https://baywet.github.io/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>My personal experience as a Program Manager and switching back to development</title><link>https://baywet.github.io/pm-experience-dev-sdk/</link><pubDate>Sun, 27 Sep 2020 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/pm-experience-dev-sdk/</guid><description>Switching back to the light side of the force: becoming a developer again I recently transitioned from Program Manager on Microsoft Graph to Software Developer in the Microsoft Graph SDKs team. I&amp;rsquo;d like to thank my previous team for welcoming me these last 7 months and allowing me to experiment with the role of Program Manager.
I thought I&amp;rsquo;d share with you some of my experience and learnings as a Program Manager.</description></item><item><title>Why should you not include telerik controls in your SharePoint products?</title><link>https://baywet.github.io/why-should-you-not-include-tel/</link><pubDate>Mon, 21 Jul 2014 03:32:04 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/why-should-you-not-include-tel/</guid><description>First and foremost this article is a feedback from the field of a very particular case of SharePoint development. Telerik products and components are very good and accelerate your developments (SharePoint or not) providing you advanced and customizable controls.
Some of you already know it, I work in a team that develops products for SharePoint (www.oceanik.com and the others one do not have yet dedicated sites, we still have work on the marketing).</description></item><item><title>Managing Resources, how to make your SharePoint solutions “globally deployed”</title><link>https://baywet.github.io/managing-resources-how-to-make/</link><pubDate>Thu, 23 Jan 2014 03:39:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/managing-resources-how-to-make/</guid><description>Introduction I wanted to publish this article months ago, back to the time I found this solution. But I did not mostly because of a lack of free time. Sebastien LEVERT, a top SharePoint developer and a member of Montreal’s SharePoint community, recently published a post about the same subject. Read it (sorry it’s in French), I’ll write my post so it is complementary. https://www.pimpmysharepoint.com/2014/01/09/deployer-des-fichiers-de-ressources-simplement/
Reminders To quickly summarize, when you develop SharePoint solutions and you want to support multiple languages (localize it) you need to use .</description></item><item><title>Boost your SharePoint solutions with distributed cache!–Part 2–Explanations tips and warnings</title><link>https://baywet.github.io/boost-your-sharepoint-solution-2013-12-15-12-06-00/</link><pubDate>Sun, 15 Dec 2013 12:06:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/boost-your-sharepoint-solution-2013-12-15-12-06-00/</guid><description>Explanations, tips, tricks and warnings Explanations This cache cluster is in facts made of appfabric hosts (caching services). One of the advantages is that hosts not members of the cluster but clients of it keep a local copy of objects. And this copy is automatically maintained up to date. The result is you do not need to implement a lazy loading pattern to avoid back and forth on the network.</description></item><item><title>Boost your SharePoint solutions with distributed cache!- Part 1–Introduction</title><link>https://baywet.github.io/boost-your-sharepoint-solution-2013-12-13-02-35-30/</link><pubDate>Fri, 13 Dec 2013 02:35:30 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/boost-your-sharepoint-solution-2013-12-13-02-35-30/</guid><description>Prelude I started to write this set of articles as one at the beginning, but I quickly realized that I had a lot of things to explain. Moreover, I’m a real chatterbox which does not help in that case. I finally decided to write a trilogy. I will publish one article every two days beginning today. The code sample will be delivered with last article so I ensure that you read everything ;-).</description></item><item><title>SharePoint Auto hosted app and ASP.NET MVC</title><link>https://baywet.github.io/sharepoint-auto-hosted-app-and/</link><pubDate>Wed, 13 Nov 2013 04:16:32 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/sharepoint-auto-hosted-app-and/</guid><description>Code apps they said, it will be easier they said…
Visual Studio 2013 comes with a new project model : SharePoint autohosted app ASP.NET MVC (Cool!)
I’m fond of SharePoint, I like MVC, why not mixing them?
Short reminder, SharePoint autohosted apps are only available for Office 365. Technically Office 365 will create an Azure website on demand when app is deployed. The potential cost overhead will be billed directly to the tenant owner.</description></item><item><title>Entity Framework and dataContext reference for a web application</title><link>https://baywet.github.io/entity-framework-and-dataconte/</link><pubDate>Thu, 07 Nov 2013 03:40:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/entity-framework-and-dataconte/</guid><description>When using the entity framework with a data context we often have this problematic:
What’s the best between performance and simplicity of usage or scalability?
(no? you do not ask yourself that kind of existential question?)
Here is a little explanation :
Static instance
In this first case you wrote a static reference to the context. Sometimes you also add some lazy loading and/or disposal management in global.asax (application end event)</description></item></channel></rss>