<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on Baywet's blog</title><link>https://baywet.github.io/tags/c</link><description>Recent content in C# on Baywet's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Mon, 19 Feb 2024 15:51:13 -0500</lastBuildDate><atom:link href="https://baywet.github.io/tags/c" rel="self" type="application/rss+xml"/><item><title>Entity Framework and dataContext reference for a web application</title><link>https://baywet.github.io/entity-framework-and-dataconte/</link><pubDate>Thu, 07 Nov 2013 03:40:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/entity-framework-and-dataconte/</guid><description>When using the entity framework with a data context we often have this problematic:
Whatâ€™s the best between performance and simplicity of usage or scalability?
(no? you do not ask yourself that kind of existential question?)
Here is a little explanation :
Static instance
In this first case you wrote a static reference to the context. Sometimes you also add some lazy loading and/or disposal management in global.asax (application end event)</description></item></channel></rss>