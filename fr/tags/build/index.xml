<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Build on Le blog de baywet</title><link>https://baywet.github.io/fr/tags/build/</link><description>Recent content in Build on Le blog de baywet</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>vbiret+blog@outlook.com (Vincent Biret)</managingEditor><webMaster>vbiret+blog@outlook.com (Vincent Biret)</webMaster><lastBuildDate>Mon, 19 Feb 2024 15:51:13 -0500</lastBuildDate><atom:link href="https://baywet.github.io/fr/tags/build/index.xml" rel="self" type="application/rss+xml"/><item><title>Actions GitHub: étiquetage et commentaire automatique des pull requests en conflit</title><link>https://baywet.github.io/fr/actions-github-label-comment-conflit/</link><pubDate>Sun, 13 Sep 2020 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/actions-github-label-comment-conflit/</guid><description>Les dépôts open source permettent une productivité considérable dans le développement de logiciels. La croissance de la base d&amp;rsquo;utilisateurs se traduit généralement par une croissance du nombre de contributeurs, qui à son tour se traduit par une meilleure solution apportant plus d&amp;rsquo;utilisateurs, etc. La maintenance de grands dépôts open source peut prendre du temps car vous passez de plus en plus de temps à revoir des contributions. Ne vous méprenez pas, ce temps passé à examiner les pull requests est généralement bien investi car il représente un facteur de gain: pour des minutes passées à revoir une pull request donnée, la base de code bénéficie d&amp;rsquo;heures d&amp;rsquo;efforts de développement investis par le contributeur.</description></item><item><title>Update : SonarQube : Endpoints et tâches</title><link>https://baywet.github.io/fr/update-sonarqube-endpoints-e/</link><pubDate>Thu, 15 Dec 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/update-sonarqube-endpoints-e/</guid><description>Peu après la fin de la publication des articles à propos de SonarQube sur mon blog, Microsoft et SonarQube ont décidé d’effectuer des modifications.
Les tâches VSTS d’analyse SonarQube avaient été conçues par Microsoft avant que le Markeplace pour Visual Studio Team Services existe.
Ils ont récemment décidé que ce serait SonarQube qui maintiendrait les tâches maintenant pour plus de flexibilité. Quel impact pour vous :
Si vous avez déjà mis en place de l’analyse statique en suivant mes posts, il va falloir mettre à jour vos définitions de build</description></item><item><title>Nouvelles tâches de build/release disponibles pour les projets dotnetcore et vsts</title><link>https://baywet.github.io/fr/nouvelles-taches-de-buildrelea/</link><pubDate>Wed, 10 Aug 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/nouvelles-taches-de-buildrelea/</guid><description>Il y a quelques mois je vous avais écrit une suite d’articles sur la mise en place d’un release pipeline pour les projets dotnetcore/dnx vers Azure web apps.
Cette suite d’articles demandait de mettre en place un certain nombre de scripts et de les exécuter à l’aide de tâches powershell.
Vous n’avez désormais plus besoin de faire ça (sauf pour la partie tests) car deux extensions sont désormais disponibles sur le marketplace :</description></item><item><title>Conférencier au SharePoint Saturday Houston 2016</title><link>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-04-01-14-00-00/</link><pubDate>Fri, 01 Apr 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-04-01-14-00-00/</guid><description>J&amp;rsquo;ai le privilège d’être conférencier au SPS de Houston (première fois!!). J’animerai cette fois une session autour des métadonnées en entreprise « Setting up your release pipeline for SharePoint and Office 365 developements » (en anglais donc).
Nous verrons au cours de cette session les outils de build et de release de visual studio online (Team foundation services), comment mettre en place des plans de build, de release etc etc. Tout l’outillage pour automatiser un maximum d’actions et rendre votre équipe de développement beaucoup plus productive.</description></item><item><title>Conférencier au SharePoint Saturday Montréal 2016</title><link>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-03-30-15-29-00/</link><pubDate>Wed, 30 Mar 2016 15:29:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-03-30-15-29-00/</guid><description>Cette année encore j’aurai l’honneur d’être conférencier au SharePoint Saturday de Montréal
J’ai aussi eu l’occasion d’aider à l’organisation aussi cette année encore, c’est une expérience intéressante et je tiens à remercier Serge, Nico, Luc, Seb et Fabrice pour leur implication sur le projet, c’est beaucoup plus de travail qu’on imagine !
Je présenterai une session sur la mise en place de votre cycle de release pour vos développements SharePoint/Office 365</description></item><item><title>Mise à jour maitrisée de schema SQL avec Entity Framework Code First dans un processus de livraison continue</title><link>https://baywet.github.io/fr/mise-a-jour-maitrisee-de-schem/</link><pubDate>Thu, 03 Mar 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/mise-a-jour-maitrisee-de-schem/</guid><description>Introduction Entity Framework est une technologie établie dans le domaine des ORM et dans le monde du .NET.
Note : Object Relational Mapping, qui fait le lien entre la persistance des données et le code plus « métier »
Il y a plusieurs méthodes pour établir le modèle de données l’une d’entre une étant le « code first » c’est-à-dire que c’est notre code qui va piloter l’évolution du schéma SQL.</description></item><item><title>Tests unitaires xUnit avec Visual Studio Team Services de projets DNX</title><link>https://baywet.github.io/fr/tests-unitaires-xunit-avec-vis/</link><pubDate>Tue, 01 Mar 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/tests-unitaires-xunit-avec-vis/</guid><description>Tests unitaires xUnit avec Visual Studio Team Services de projets DNX
Introduction Avec DNX qui va bientôt passer en version finale vous allez être de plus en plus nombreux à vouloir effectuer des tests unitaires afin de vous assurer de la qualité des développements effectués.
Idéalement ces tests seront exécutés dans un processus d’intégration continue afin de s’assurer qu’il n’y a pas eu de régressions techniques, fonctionnelles et/ou de performance.</description></item><item><title>Build DNX avec agent build vnext installé (TFS , VSTS)</title><link>https://baywet.github.io/fr/build-dnx-avec-agent-build-vne/</link><pubDate>Fri, 19 Feb 2016 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/build-dnx-avec-agent-build-vne/</guid><description>Avec DNX/DNU qui va bientôt arriver en RTM vous allez êtres nombreux à vouloir builder et déployer de l’ASP.NET Core 1 (appelé asp.net mvc 5 il n’y a encore pas si longtemps que ça)
Si la procédure est assez bien décrite dans le cadre où vous utilisez les agents fournis par visual studio team services (ceux hébergés dans azure) c’est un peu plus complexe dans les faits quand on veut le faire en local.</description></item><item><title>Incrémenter automatiquement le numéro de version de fonctionnalité SharePoint avec le build 2015</title><link>https://baywet.github.io/fr/incrementer-automatiquement-le/</link><pubDate>Wed, 18 Nov 2015 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/incrementer-automatiquement-le/</guid><description>Depuis quelques mois Microsoft a livré un nouveau système de build automatisé avec visual studio online / tfs 2015.
Ce système est bien plus ouvert que les anciennes build XAML, à base de tâches et plus facile à personnaliser.
Une des tâches existantes permet d’exécuter un script powershell.
Supposons que pour une raison quelconque vous souhaitiez incrémenter automatiquement le numéro de version de vos fonctionnalités SharePoint (au sein de votre solution) au moment du build.</description></item><item><title>Déploiement de Cloud services Azure via les builds 2015</title><link>https://baywet.github.io/fr/deploiement-de-cloud-services/</link><pubDate>Tue, 04 Aug 2015 14:00:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/deploiement-de-cloud-services/</guid><description>Introduction au nouveau système de build Microsoft a récemment rendu disponible un nouveau modèle de définitions de build avec la version 2015 de Visual studio (les binaires tfs 2015 ne sont pas encore disponibles mais le service est déjà présent dans Visual Studio Online).
Pour rappel, les « anciens » modèles de build étaient basés sur deux éléments :
Le build process template : en XAML, qui définit les étapes que va suivre la séquence de build Le build défintion : qui va servir de liant entre le template, les sources et un ensemble de paramètres.</description></item><item><title>Build automatisé de solutions SharePoint (full trust) 2013 – Où sont mes solutions?</title><link>https://baywet.github.io/fr/build-automatise-de-solutions/</link><pubDate>Thu, 04 Dec 2014 01:11:39 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/build-automatise-de-solutions/</guid><description>Suite de la série sur le build automatisé de solutions SharePoint 2013 (full trust) avec tfs 2013 et visual studio 2013.
build-automatise-de-solution-s
Si vous avez suivit ma série vous avez dû vous rendre compte que les dll étaient compilées mais que les wsp étaient absents.
C’est parce que par défault msbuild ne package pas vos solutions. C’est dommage hein ?
Voici un peu de documentation supplémentaire qui indique d’ajouter IsPackaging=true à la définition de build en tant que paramètre.</description></item><item><title>Visual Studio 2013 Update 4 et build automatisé de solutions SharePoint (full trust)</title><link>https://baywet.github.io/fr/visual-studio-2013-update-4-et/</link><pubDate>Mon, 01 Dec 2014 00:07:00 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/visual-studio-2013-update-4-et/</guid><description>Pour faire suite à ma série sur le build automatisé de solutions full trust pour SharePoint voici une mise à jour de mon correctif.
En effet si vous regardez la seconde erreur expliquée icivous verrez qu’il faut remplacer des lignes pour faire fonctionner le tout.
Avec l’update 4 on sent que Microsoft prépare l’arrivée complète du 64 bits puisque les nouvelles lignes de remplacement sont désormais.
&amp;lt;Import Condition=&amp;#34;&amp;#39;$(Language)&amp;#39; == &amp;#39;C#&amp;#39;&amp;#34; Project=&amp;#34;$(MSBuildExtensionsPath32)\Microsoft\Windows Workflow Foundation\v3.</description></item><item><title>Build automatisé de solution SharePoint server (fulltrust) avec visual studio online</title><link>https://baywet.github.io/fr/build-automatise-de-solution-s/</link><pubDate>Wed, 29 Oct 2014 02:22:08 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/build-automatise-de-solution-s/</guid><description>Introduction Depuis plusieurs articles j’évoque le fait que nous (Negotium, la compagnie où je travaille) avons migré vers visual studio online (TFS Online). Ce service offre une majorité des fonctionnalités offertes par la version on premises de Team Foundation Server 2013 et même certaines fonctionnalités exclusives.
Si vous n’avez qu’une vague idée de ce que peut faire TFS2013/VSO et que vous voulez en apprendre plus je vous recommande très fortement Professional Application Lifecycle Management de chez Wrox.</description></item><item><title>Conversion d’un certificat protégé par mot de passe (pfx) en certificat non protégé (snk)</title><link>https://baywet.github.io/fr/conversion-dun-certificat-prot/</link><pubDate>Sat, 04 Oct 2014 01:05:51 +0000</pubDate><author>vbiret+blog@outlook.com (Vincent Biret)</author><guid>https://baywet.github.io/fr/conversion-dun-certificat-prot/</guid><description>Au travail je suis en train de mettre en place du build automatisé pour des projets SharePoint (full trust) sur visual studio online. (Attendez-vous à voir plusieurs articles à ce sujet au fur et à mesure que je rencontre et résous des erreurs)
Qui dit développement SharePoint dit assemblies signés par un certificat. Lorsque l’on initialise le projet on a deux options :
Certificat est protégé par mot de passe : (extension pfx) c’était au début du tooling SharePoint, ou bien si vous avez monté la structure de solution (visual studio) vous-même avec plusieurs assemblies.</description></item></channel></rss>