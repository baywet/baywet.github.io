<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Le blog de baywet</title><link>https://baywet.github.io/fr/tags/devops/</link><description>Recent content in devops on Le blog de baywet</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Jan 2019 15:00:00 +0000</lastBuildDate><atom:link href="https://baywet.github.io/fr/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>SharePoint Framework et DevOps : Nouvelle documentation, nouveaux exemples</title><link>https://baywet.github.io/fr/sharepoint-framework-et-devops/</link><pubDate>Tue, 15 Jan 2019 15:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/sharepoint-framework-et-devops/</guid><description>Version courte Avec la nouvelle version de Azure DevOps, une nouvelle documentation au sujet de la mise en place d’un processus d’intégration et de déploiement continu avec Azure DevOps est disponible. Votre retour d’expérience est toujours le bienvenu ! L’organisation Patterns and Practices inclut aussi un repository dédié aux outils et exemples DevOps dans le contexte du SharePoint Framework.
Version Longue Mon apprentissage des pratiques DevOps J’ai eu l’occasion de travailler sur la Gestion du Cycle Application (ALM), l’intégration continue (CI), le déploiement continu (CD) et les pratiques DevOps appliqués à SharePoint/Azure/Office 365 depuis plusieurs années.</description></item><item><title>Git : fork/importer/copie manuelle, bonnes pratiques</title><link>https://baywet.github.io/fr/git-forkimportercopie-manuell/</link><pubDate>Wed, 21 Mar 2018 09:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/git-forkimportercopie-manuell/</guid><description>En tant que développer à 2toLead une de mes tâches récurrentes consiste à définir des bonnes pratiques de gestion du code source en interne ou pour nos clients. Une des questions qui revient souvent est la suivante : Si je veux partir d’une base de code existante et la modifier, devrais-je forker ce repo ou bien faire quelque chose d’autre ?
Il n’est aujourd’hui pas facile de trouver des explications simples et claires sur le web, aussi me suis-je dit que j’aller m’y essayer.</description></item><item><title>Utiliser PnP PowerShell avec Visual Studio Team Services (VSTS) et l'agent hébergé</title><link>https://baywet.github.io/fr/utiliser-pnp-powershell-avec-v/</link><pubDate>Fri, 29 Sep 2017 06:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/utiliser-pnp-powershell-avec-v/</guid><description>Visual Studio Team Services (VSTS) fournit des fonctionnalités d&amp;rsquo;intégration continue (CI) et de déploiement continu (CD) assez intéressant que vous pouvez utiliser au sein de vos pipelines DevOps et vos séquences automatisées pour vos développements.
Si vos solutions se reposent sur PnP PowerShell durant leurs phases de build et/ou de déploiement, vous aurez besoin d&amp;rsquo;avoir PnP PowerShell installé sur l&amp;rsquo;agent. Malheureusement l&amp;rsquo;agent hébergé n&amp;rsquo;a pas PnP PowerShell installé par défaut. Note: Cette documentation s&amp;rsquo;applique uniquement à l&amp;rsquo;agent hébergé 2017 et l&amp;rsquo;agent hébergé, l&amp;rsquo;agent hébergé base linux n&amp;rsquo;est pas supporté pour l&amp;rsquo;instant.</description></item><item><title>Mise à jour du repo SonarQube</title><link>https://baywet.github.io/fr/mise-a-jour-du-repo-sonarqube/</link><pubDate>Thu, 07 Sep 2017 08:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/mise-a-jour-du-repo-sonarqube/</guid><description>Il y a maintenant quelques temps que j&amp;rsquo;ai publié une série d&amp;rsquo;articles pour SonarQube.
Pour rappel SonarQube est un outil d&amp;rsquo;analyse centralisé du code et ce de manière automatisée. Il vous permet de vérifier que le code est bien structuré, propose des solutions et résolutions et permet d&amp;rsquo;effectuer un suivit des problèmes dans le code.
Cerise sur le gateau, la majeure partie de la solution est open-source.
Il m&amp;rsquo;aurai fallu plus d&amp;rsquo;un an (conférences, autres articles, etc n&amp;rsquo;aidant pas), mais j&amp;rsquo;ai fini par traduire la série pour publication sur mon blog en Anglais.</description></item><item><title>Conférencier au SharePoint Saturday Monaco 2017</title><link>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2017-04-25-14-00-00/</link><pubDate>Tue, 25 Apr 2017 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2017-04-25-14-00-00/</guid><description>J’ai le plaisir de vous annoncer que j’ai été sélectionné comme conférencier pour le SPS Monaco 2017. J’animerai une session autour de l’ALM des développements SharePoint/Office 365 avec Azure « Mise en place de votre processus DevOps Office/Office 365/SharePoint » (aka DevOps).
Si vous êtes dans le coin le Samedi 3 Juin n’hésitez pas à vous inscrire et à participer. Pour rappel les SPS ce sont des évènements gratuits organisés par la communauté avec des sessions de qualité.</description></item><item><title>Update : SonarQube : Endpoints et tâches</title><link>https://baywet.github.io/fr/update-sonarqube-endpoints-e/</link><pubDate>Thu, 15 Dec 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/update-sonarqube-endpoints-e/</guid><description>Peu après la fin de la publication des articles à propos de SonarQube sur mon blog, Microsoft et SonarQube ont décidé d’effectuer des modifications.
Les tâches VSTS d’analyse SonarQube avaient été conçues par Microsoft avant que le Markeplace pour Visual Studio Team Services existe.
Ils ont récemment décidé que ce serait SonarQube qui maintiendrait les tâches maintenant pour plus de flexibilité. Quel impact pour vous :
Si vous avez déjà mis en place de l’analyse statique en suivant mes posts, il va falloir mettre à jour vos définitions de build</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 14 - Conclusion</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-12-02-14-00-00/</link><pubDate>Fri, 02 Dec 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-12-02-14-00-00/</guid><description>L’installation et la mise en place de SonarQube peut paraitre assez complexe et fastidieuse.
J’espère que cette suite d’articles et les scripts que je vous ai fournis vous ont permis d’aller plus vite dans sa mise en place.
Vous avez maintenant la capacité de déterminer clairement votre dette technique et d’y remédier pour améliorer la qualité de vos développements.
Il est évident que voir apparaitre un millier de problèmes dans le code peut être décourageant, gardez simplement cela en tête :</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 13 - Bonus configuration de l’extension SonarLint</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-30-14-00-00/</link><pubDate>Wed, 30 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-30-14-00-00/</guid><description>TL ; DR Vous avez la possibilité d’afficher les résultats d’analyse SonarQube en direct dans la console erreur et informations de Visual Studio avec la même base de règles configurées pour le projet d’analyse que sur le serveur.
Installation de l’extension Simplement se rendre sur https://www.sonarlint.org/visualstudio/index.html et procéder à l’installation.
Liaison de la solution Visual Studio au Projet d’analyse Depuis le Team Explorer cliquer sur SonarQube
Cliquer sur connecter.
(si vous avez une erreur de certificats, il vous faudra installer le certificat auto-signé de la machine)</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 12 - Contrôle des résultats</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-28-14-00-00/</link><pubDate>Mon, 28 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-28-14-00-00/</guid><description>TL ; DR Les erreurs d’analyse statique vont apparaitre comme des warnings dans la section compilation. Un badge d’état de l’analyse statique va apparaitre sur la page de rapport de la build et vous aurez des résultats visibles dans SonarQube.
Résultats affichés avec la build Lorsque vous lancez une build au résultat vous trouverez un encart supplémentaire pointant vers les résultats de l’analyse statique
Résultats visibles dans SonarQube Sur votre instance de SonarQube vous trouverez des résultats d’analyse qui indiqueront la progression ou la regression du code.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 12 - Mise à jour de votre définition de build</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-25-14-00-00/</link><pubDate>Fri, 25 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-25-14-00-00/</guid><description>TL ; DR L’analyse statique va s’effectuer au moment où vous buildez votre projet. Notez que pour le moment seule une intégration avec msbuild (la tâche Visual Studio Build) existe.
Si vous buildez des projets avec node/npm ou autres, il est possible que la configuration requise soit différente ainsi que les outils (tâches gulp par exemple).
Ajout des tâches à la définition Nous partirons du principe que vous avez déjà une build 2015 en place</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 11 - Ajout du projet SonarQube</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-23-14-00-00/</link><pubDate>Wed, 23 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-23-14-00-00/</guid><description>TL ; DR SonarQube a une notion de projet d’analyse. Ces projets vont regrouper les résultats d’analyse de votre code. Vous pouvez configurer un projet par dépôt de code ou même par branche pour avoir des deltas d’analyse différents. (ex ma master build tous les mois, je veux voir l’évolution au par mois et ma dev tous les jours donc je veux voir l’évolution tous les jours).
Ajout du projet Pour cela rendez-vous dans « configuration » -&amp;gt; « Projects » -&amp;gt; « Management » puis « create project »</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 10 - Création d’un compte de service et référencement dans VSTS</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-21-14-00-00/</link><pubDate>Mon, 21 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-21-14-00-00/</guid><description>TL ; DR Pour éviter que m’importe qui puisse envoyer des résultats d’analyse sur votre serveur SonarQube, nous allons créer un compte de service et forcer l’authentification.
Création du compte de service Pour cela rendez-vous dans administration, sécurité, utilisateurs et ajoutez un compte.
Provisionnement du compte de service Pour le référencer dans VSTS, rendez-vous sur votre projet d’équipe, cliquez sur paramètres (la roue crantée), Services, nouveau service générique et entrez url, nom d’usager et mot de passe du compte de service.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 9 - Configuration d’Azure Active directory pour l’authentification</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-18-14-00-00/</link><pubDate>Fri, 18 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-18-14-00-00/</guid><description>TL ; DR Nous allons installer et configurer un module complémentaire pour déléguer l’authentification à Azure Active Directory. Cela permettra à nos développeurs d’utiliser le même compte entre Visual Studio Team Services et SonarQube.
Configuration du module d’authentification Depuis la version 5.4 SonarQube dispose d&amp;rsquo;un plugin supplémentaire pour configurer l&amp;rsquo;authentification avec AAD en se reposant sur OAuth. Cela va vous permettre d&amp;rsquo;utiliser vos comptes d&amp;rsquo;entreprise pour authentifier les collaborateurs et leur donner des permissions.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 8 - Ajout de modules</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-16-14-00-00/</link><pubDate>Wed, 16 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-16-14-00-00/</guid><description>TL ; DR L’analyse statique fonctionne à l’aide de règles. Ces règles sont regroupées par langages ou familles de langages dans des modules que vous pouvez installer. Outre l’apport du support de langages de développements ces modules peuvent étendre les fonctionnalités natives de SonarQube.
La plupart sont gratuits et libres, certains sont soumis à des licences commerciales.
Installation des modules complémentaires Rendez-vous dans configuration, système, et recherchez puis installez les modules qui vous intéressent.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 7 - Installation de la machine</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-14-14-00-00/</link><pubDate>Mon, 14 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-14-14-00-00/</guid><description>TL ; DR Nous allons mettre la machine à jour, installer docker dessus, provisionner les conteneurs dont nous avons besoin.
Installation de docker et mises à jour Connectez-vous en ssh sur la machine (Putty est un très bon client pour windows) et exécutez les commandes suivantes :
https://github.com/baywet/azure-docker-sonarqube#step-4-setup-docker
Mise en place des conteneurs, création des certifcats Les conteneurs sont les composants de notre installation qui vont effectuer le travail de gérer le trafic web et fournir le service de SonarQube.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 6 - Création de la base de données</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-11-14-00-00/</link><pubDate>Fri, 11 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-11-14-00-00/</guid><description>TL ; DR Création d’une db sql azure avec la collation SQL_Latin1_General_CP1_CS_AS.
Détails de la création de la base Les étapes de création de base de données SQL Azure sont déjà bien décrites, point de détail important : utiliser la collation suivante : SQL_Latin1_General_CP1_CS_AS. (et utiliser un modèle vide)
https://github.com/baywet/azure-docker-sonarqube#step-3-create-the-azure-sql-database
Notez les accès à la base de données (FQDN du serveur, nom utilisateur, mot de passe, nom de la base) quelque part, nous en aurons besoin plus tard.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 5 - Ouverture du port de SonarQube</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-09-14-00-00/</link><pubDate>Wed, 09 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-09-14-00-00/</guid><description>TL ; DR Ouvrez les ports 22, 9000, 80 et 443 en entrant sur la VM.
Détail de l’ouverture des ports Plutôt que de répéter ce qui est déjà documenté, je préfère vous fournir le lien directement
https://github.com/baywet/azure-docker-sonarqube#step-2-opening-firewall-ports
Il faut ouvrir les ports 22, 80, 443 et 9000 qui vont nous permettre respectivement de communiquer avec la machine, y accéder en http et https, et accéder à la console de gestion.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 4 - Provisionnement de la VM SonarQube</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-07-14-00-00/</link><pubDate>Mon, 07 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-07-14-00-00/</guid><description>TL ; DR Provisionnez un ubuntu server dans Azure, installez Putty et WinSCP sur votre machine locale
Détail du provisionnement Voici un lien vers une documentation pour vous expliquer comment faire
https://github.com/baywet/azure-docker-sonarqube#step-1-create-the-virtual-machine-in-azure
Voilà ! la machine est en cours de provisionnement !
Pendant ce temps profitez-en pour télécharger un terminal SSH si vous n’en avez pas déjà un, je vous recommande https://www.putty.org/</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 3 - La topologie</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-04-14-00-00/</link><pubDate>Fri, 04 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-04-14-00-00/</guid><description>TL ; DR Planification, Sources, Build, Déploiement, Tests : VSTS. Analyse : Azure VM (SonarQube), Azure SQL.
Détail de la topologie de notre industrie logicielle Curieux de l’essayer j’ai pris du temps pour le mettre en place avec Visual Studio Team Services. Etant donné que nous utilisons un maximum des services cloud chez Negotium j’ai réalisé l’installation suivante :
Contrôle de code source : VSTS (git ou tfsvc ça n&amp;rsquo;a pas d&amp;rsquo;importance)</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 2 - Analyse Statique</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-02-14-00-00/</link><pubDate>Wed, 02 Nov 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-11-02-14-00-00/</guid><description>TL ; DR L’analyse statique ça permet de comprendre les faiblesses du code en se basant sur un ensemble de règles. On peut réaliser ça côté serveur de manière automatisée ou bien depuis l’IDE.
Introduction à l’analyse statique Le principe de l’analyse statique est de se baser sur des ensembles de règles plus ou moins complexes qui vont détecter des modèles dans le code qui sont problématiques et catégoriser leur important ainsi que proposer une résolution.</description></item><item><title>Déterminez votre dette technique à l’aide de SonarQube : 1 - Introduction</title><link>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-10-31-14-00-00/</link><pubDate>Mon, 31 Oct 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/determinez-votre-dette-techniq-2016-10-31-14-00-00/</guid><description>TL ; DR Cette série va vous expliquer comment mettre en place une analyse de la qualité de votre code automatique, pour presque gratuit avec Visual Studio Team Services, Docker, Azure, et SonarQube.
Préambule Dans tous nos projets de développement on a tous du code de mauvaise qualité. Cela va du hack dont on est pas fier et qu’on a dû réaliser rapidement à un certain moment au code réalisé il fut un temps par un développeur qui a quitté la compagnie et dont personne n’est au courant.</description></item><item><title>Mise à jour : dot net core et intégration continue</title><link>https://baywet.github.io/fr/mise-a-jour-dot-net-core-et-i/</link><pubDate>Thu, 27 Oct 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/mise-a-jour-dot-net-core-et-i/</guid><description>Il y a quelques mois j’avais publié une série d’articles sur l’intégration continue de projets dot net core.
Bien évidemment c’était très tôt du point de vue de la maturité de ce « nouveau framework » (on était encore en beta) et depuis les outils et méthodologies ont évolué.
La bonne nouvelle c’est que vous n’avez plus besoin de script powershell complexe et assez hasardeux dans le processus. Vous n’avez plus besoin non plus d’autres tâches que celles pour l’invite de commande et les tâches de publication azure.</description></item><item><title>Conférencier au SharePoint Saturday Lyon 2016</title><link>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-09-12-14-00-00/</link><pubDate>Mon, 12 Sep 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/conferencier-au-sharepoint-sat-2016-09-12-14-00-00/</guid><description>J’ai le plaisir de vous annoncer que j’ai été sélectionné comme conférencier pour le SPS Lyon 2016. J’animerai une session autour de l’ALM des développements SharePoint/Office 365 avec Azure « Mise en place de votre processus de livraison continue pour Office365/SharePoint avec Azure et Visual studio Team Services » (aka devops).
Si vous êtes dans le coin le Samedi 8 Octobre n’hésitez pas à vous inscrire et à participer. Pour rappel les SPS ce sont des évènements gratuits organisés par la communauté avec des sessions de qualité.</description></item><item><title>Nouvelles tâches de build/release disponibles pour les projets dotnetcore et vsts</title><link>https://baywet.github.io/fr/nouvelles-taches-de-buildrelea/</link><pubDate>Wed, 10 Aug 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/nouvelles-taches-de-buildrelea/</guid><description>Il y a quelques mois je vous avais écrit une suite d’articles sur la mise en place d’un release pipeline pour les projets dotnetcore/dnx vers Azure web apps.
Cette suite d’articles demandait de mettre en place un certain nombre de scripts et de les exécuter à l’aide de tâches powershell.
Vous n’avez désormais plus besoin de faire ça (sauf pour la partie tests) car deux extensions sont désormais disponibles sur le marketplace :</description></item><item><title>Migration Git – nettoyage des références TFS</title><link>https://baywet.github.io/fr/migration-git-nettoyage-des-r/</link><pubDate>Mon, 11 Jan 2016 14:00:00 +0000</pubDate><guid>https://baywet.github.io/fr/migration-git-nettoyage-des-r/</guid><description>J’ai récemment dû migrer plusieurs contrôles de code source depuis TFS vers Git (Git sur vsonline). Pour ce faire j’ai utilisé Git-Tfs https://github.com/git-tfs/git-tfs qui fait très bien le travail et est vraiment bien documenté https://github.com/git-tfs/git-tfs/blob/master/doc/usecases/migrate_tfs_to_git.md
A une étape de la documentation on vous conseille de supprimer les fichiers *.vspscc, *.vssscc et de nettoyer les fichiers *.sln et *.*proj des références vers TFS.
Ceci permet d’éviter que Visual Studio tente de se reconnecter à TFS à chaque fois que l’on ouvre projet/solution.</description></item></channel></rss>